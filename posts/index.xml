<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Cleyton Farias</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Cleyton Farias</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Feb 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using Julia for Data Science </title>
      <link>/posts/using-julia-for-data-science/</link>
      <pubDate>Mon, 11 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/using-julia-for-data-science/</guid>
      <description>


&lt;p&gt;This a quick introduction to the Julia programming language. The aim of this post
is to present to you how you can easily install and work rightaway with
datasets with Julia.&lt;/p&gt;
&lt;div id=&#34;why-julia&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Why Julia?&lt;/h1&gt;
&lt;p&gt;Glad you asked! Julia is a high level programming language released in 2012 by a
team of MIT researchers. Since its beginning, the aim was to solve the so called
two-language programing problem: easy to use functionalities of interpretable languages
(Python, R, Matlab) vs high performance of compiled languages (C, C++, Fortran).
According to its creators:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We want a language that’s open source, with a liberal license.
We want the speed of C with the dynamism of Ruby.
We want a language that’s homoiconic, with true macros like Lisp, but with obvious,
familiar mathematical notation like Matlab. We want something as usable for
general programming as Python, as easy for statistics as R, as natural for string
processing as Perl, as powerful for linear algebra as Matlab, as good at gluing
programs together as the shell.
Something that is dirt simple to learn, yet keeps the most serious hackers happy.
We want it interactive and we want it compiled. — &lt;a href=&#34;https://julialang.org/&#34; target=&#34;_blank&#34;&gt;julialang.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Hence, Julia was born. Combining the JIT (Just In Time) compiler and
Julia’s multiple-dispatch system plus the fact that its codebase is written
entirely in native language, Julia gives birth to the popular phrase in the
community:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Walks like Python, runs like C.”&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;installing-julia&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Installing Julia&lt;/h1&gt;
&lt;p&gt;To play around with Julia there are some options. One obvious way is to download
the official binaries from the &lt;a href=&#34;https://julialang.org/downloads/&#34;&gt;site&lt;/a&gt; for your
specific plataform (Windows, macOS, Linux, etc). At the
time of this writting, the &lt;strong&gt;Current stable release&lt;/strong&gt; is &lt;strong&gt;v1.1.0&lt;/strong&gt; and the
&lt;strong&gt;Long-term support release&lt;/strong&gt; is &lt;strong&gt;v1.0.3&lt;/strong&gt;. Once you downloaded and execute
the binaries, you will see the following window:&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;/posts/julia.png&#34; width=&#34;500&#34; /&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;Another options is to use Julia in the browser on &lt;a href=&#34;https://juliabox.com/&#34;&gt;JuliaBox.com&lt;/a&gt;
with Jupyter notebooks. No installation is required – just point your browser
there, login and start playing around.&lt;/p&gt;
&lt;div id=&#34;installing-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installing Packages&lt;/h2&gt;
&lt;p&gt;All the package management in Julia is performed by the &lt;strong&gt;Pkg&lt;/strong&gt; package. To
install a given package we use &lt;code&gt;Pkg.add(&#34;package_name&#34;)&lt;/code&gt;. In this tutorial we
are going to use some packages that are not pre-installed with Julia. To install
them, do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using Pkg
Pkg.add(&amp;quot;DataFrames&amp;quot;)
Pkg.add(&amp;quot;DataFramesMeta&amp;quot;)
Pkg.add(&amp;quot;CSV&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We installed three packages: &lt;strong&gt;DataFrames&lt;/strong&gt; (which is the subject of this post),
&lt;strong&gt;DataFramesMeta&lt;/strong&gt; (we will use some of its functionalities) and &lt;strong&gt;CSV&lt;/strong&gt; (to read
and write CSV files).&lt;/p&gt;
&lt;p&gt;Of course there is more about package management in Julia than I just showed.
A great introduction is presented in this &lt;a href=&#34;https://www.youtube.com/watch?v=76KL8aSz0Sg&#34;&gt;video&lt;/a&gt; by Jane
Harriman. For more advanced usage, please refer to the &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Pkg/index.html&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;introduction-to-dataframes-in-julia&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Introduction to DataFrames in Julia&lt;/h1&gt;
&lt;p&gt;In Julia, tablular data is handled using the &lt;strong&gt;DataFrames&lt;/strong&gt; package. Other packages
are commonly used to read/write data into/from Julia such as &lt;strong&gt;CSV&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;A data frame is created using the &lt;code&gt;DataFrame()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;using DataFrames 
foo = DataFrame();
foo &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0×0 DataFrame&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To use the functionalities of the package, let’s create some random data. I will
use the &lt;code&gt;rand()&lt;/code&gt; function to generate random numbers to create an array 100 x 10
and convert it to a data frame:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;foo = DataFrame(rand(100, 10));
foo &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1        │ x2       │ x3       │ x4        │ x5        │ x6       │
## │     │ Float64   │ Float64  │ Float64  │ Float64   │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼───────────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │ 0.939219 │ 0.892338  │ 0.864097  │ 0.488121 │
## │ 2   │ 0.623908  │ 0.483838 │ 0.393936 │ 0.197214  │ 0.813324  │ 0.69291  │
## │ 3   │ 0.16832   │ 0.362292 │ 0.156968 │ 0.461822  │ 0.0627343 │ 0.220052 │
## │ 4   │ 0.507221  │ 0.320803 │ 0.453834 │ 0.0216875 │ 0.316135  │ 0.321148 │
## │ 5   │ 0.0681251 │ 0.496204 │ 0.911449 │ 0.018065  │ 0.606398  │ 0.942852 │
## │ 6   │ 0.0138614 │ 0.210695 │ 0.223389 │ 0.511162  │ 0.20312   │ 0.833942 │
## │ 7   │ 0.816734  │ 0.198471 │ 0.424787 │ 0.505844  │ 0.120509  │ 0.843966 │
## ⋮
## │ 93  │ 0.65145   │ 0.247612 │ 0.970007 │ 0.486396  │ 0.397107  │ 0.355256 │
## │ 94  │ 0.697337  │ 0.766387 │ 0.063506 │ 0.266147  │ 0.0594699 │ 0.655208 │
## │ 95  │ 0.424821  │ 0.821294 │ 0.409617 │ 0.699104  │ 0.215349  │ 0.579652 │
## │ 96  │ 0.255547  │ 0.941036 │ 0.439767 │ 0.94476   │ 0.196473  │ 0.013604 │
## │ 97  │ 0.811991  │ 0.521148 │ 0.978935 │ 0.0962431 │ 0.477039  │ 0.935685 │
## │ 98  │ 0.560213  │ 0.957808 │ 0.174333 │ 0.148671  │ 0.318692  │ 0.98489  │
## │ 99  │ 0.610947  │ 0.924053 │ 0.457472 │ 0.189614  │ 0.130914  │ 0.9066   │
## │ 100 │ 0.819324  │ 0.503031 │ 0.642566 │ 0.400579  │ 0.48958   │ 0.938605 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe you have noticed the “;” at the end of a command. It turns out that in Julia,
contrary to many other languages, &lt;strong&gt;everything is an expression&lt;/strong&gt;, so it will return
a result. Hence, to &lt;em&gt;turn off&lt;/em&gt; this return, we must include the “;” at the end of
each command.&lt;/p&gt;
&lt;p&gt;To get the dimension of a data frame, we can use the &lt;code&gt;size()&lt;/code&gt; function. Also,
similarly to &lt;strong&gt;R&lt;/strong&gt; programming language, &lt;code&gt;nrow()&lt;/code&gt; and &lt;code&gt;ncol()&lt;/code&gt; are available to
get the number of rows and columns, respectively:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;size(foo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## (100, 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;nrow(foo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;ncol(foo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another basic task when working with datasets is to to get the names of each
variable contained in the table. We use the &lt;code&gt;names()&lt;/code&gt; function to get the column
names:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;names(foo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10-element Array{Symbol,1}:
##  :x1 
##  :x2 
##  :x3 
##  :x4 
##  :x5 
##  :x6 
##  :x7 
##  :x8 
##  :x9 
##  :x10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get a summary of the dataset in general, we can use the function &lt;code&gt;describe()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;describe(foo)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10×8 DataFrame. Omitted printing of 2 columns
## │ Row │ variable │ mean     │ min         │ median   │ max      │ nunique │
## │     │ Symbol   │ Float64  │ Float64     │ Float64  │ Float64  │ Nothing │
## ├─────┼──────────┼──────────┼─────────────┼──────────┼──────────┼─────────┤
## │ 1   │ x1       │ 0.560864 │ 0.00806191  │ 0.611629 │ 0.994932 │         │
## │ 2   │ x2       │ 0.514357 │ 0.00105673  │ 0.490021 │ 0.975108 │         │
## │ 3   │ x3       │ 0.531462 │ 0.00197897  │ 0.516806 │ 0.986501 │         │
## │ 4   │ x4       │ 0.47548  │ 0.018065    │ 0.463849 │ 0.994771 │         │
## │ 5   │ x5       │ 0.433579 │ 0.00523009  │ 0.378303 │ 0.989458 │         │
## │ 6   │ x6       │ 0.521775 │ 0.013604    │ 0.551921 │ 0.99008  │         │
## │ 7   │ x7       │ 0.506545 │ 0.000510909 │ 0.496967 │ 0.997897 │         │
## │ 8   │ x8       │ 0.521334 │ 0.0179499   │ 0.560527 │ 0.990348 │         │
## │ 9   │ x9       │ 0.488802 │ 0.00414927  │ 0.515577 │ 0.9945   │         │
## │ 10  │ x10      │ 0.506787 │ 0.0138833   │ 0.454951 │ 0.992727 │         │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that there is a message indicating the omission of some columns. This is the
default behavior of Julia. To avoid this feature, we use the &lt;code&gt;show()&lt;/code&gt; function
as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;show(describe(foo), allcols = true)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;manipulating-rows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulating Rows:&lt;/h2&gt;
&lt;p&gt;Subset rows in Julia can be a little odd in the beginning, but once you get used to, it becomes
more logical. For example, suppose we want the rows where &lt;em&gt;x1&lt;/em&gt; is above its average.
We could this as follows:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Loading the Statistics package:
using Statistics
## Creating the conditional:
cond01 = foo[:x1] .&amp;gt;= mean(foo[:x1]);
## Subsetting the rows:
foo[cond01, :] &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 57×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1       │ x2        │ x3        │ x4        │ x5         │ x6       │
## │     │ Float64  │ Float64   │ Float64   │ Float64   │ Float64    │ Float64  │
## ├─────┼──────────┼───────────┼───────────┼───────────┼────────────┼──────────┤
## │ 1   │ 0.623908 │ 0.483838  │ 0.393936  │ 0.197214  │ 0.813324   │ 0.69291  │
## │ 2   │ 0.816734 │ 0.198471  │ 0.424787  │ 0.505844  │ 0.120509   │ 0.843966 │
## │ 3   │ 0.925035 │ 0.891901  │ 0.0196221 │ 0.994771  │ 0.142404   │ 0.471003 │
## │ 4   │ 0.823948 │ 0.810748  │ 0.691364  │ 0.443197  │ 0.447084   │ 0.165229 │
## │ 5   │ 0.754705 │ 0.0969488 │ 0.3837    │ 0.927363  │ 0.00523009 │ 0.184971 │
## │ 6   │ 0.768552 │ 0.847732  │ 0.850599  │ 0.775429  │ 0.146704   │ 0.601648 │
## │ 7   │ 0.8529   │ 0.860481  │ 0.574619  │ 0.0622395 │ 0.0577716  │ 0.450645 │
## ⋮
## │ 50  │ 0.798644 │ 0.400914  │ 0.305065  │ 0.525288  │ 0.900493   │ 0.548185 │
## │ 51  │ 0.74681  │ 0.975108  │ 0.612138  │ 0.219238  │ 0.221016   │ 0.648086 │
## │ 52  │ 0.84517  │ 0.72699   │ 0.817828  │ 0.859017  │ 0.886562   │ 0.52091  │
## │ 53  │ 0.65145  │ 0.247612  │ 0.970007  │ 0.486396  │ 0.397107   │ 0.355256 │
## │ 54  │ 0.697337 │ 0.766387  │ 0.063506  │ 0.266147  │ 0.0594699  │ 0.655208 │
## │ 55  │ 0.811991 │ 0.521148  │ 0.978935  │ 0.0962431 │ 0.477039   │ 0.935685 │
## │ 56  │ 0.610947 │ 0.924053  │ 0.457472  │ 0.189614  │ 0.130914   │ 0.9066   │
## │ 57  │ 0.819324 │ 0.503031  │ 0.642566  │ 0.400579  │ 0.48958    │ 0.938605 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if we want two conditionals? For example, we want the same condition as before
and/or the rows where &lt;em&gt;x2&lt;/em&gt; is greater than or equal its average? Now things
become trickier. Let’s check how we could do this:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Creating the second conditional:
cond02 = foo[:x2] .&amp;gt;= mean(foo[:x2]);
## Subsetting cond01 AND cond02:
foo[.&amp;amp;(cond01, cond02), :]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 30×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1       │ x2       │ x3        │ x4        │ x5        │ x6       │
## │     │ Float64  │ Float64  │ Float64   │ Float64   │ Float64   │ Float64  │
## ├─────┼──────────┼──────────┼───────────┼───────────┼───────────┼──────────┤
## │ 1   │ 0.925035 │ 0.891901 │ 0.0196221 │ 0.994771  │ 0.142404  │ 0.471003 │
## │ 2   │ 0.823948 │ 0.810748 │ 0.691364  │ 0.443197  │ 0.447084  │ 0.165229 │
## │ 3   │ 0.768552 │ 0.847732 │ 0.850599  │ 0.775429  │ 0.146704  │ 0.601648 │
## │ 4   │ 0.8529   │ 0.860481 │ 0.574619  │ 0.0622395 │ 0.0577716 │ 0.450645 │
## │ 5   │ 0.612005 │ 0.924993 │ 0.986501  │ 0.149416  │ 0.565496  │ 0.908611 │
## │ 6   │ 0.677213 │ 0.55719  │ 0.0112873 │ 0.680048  │ 0.218884  │ 0.321084 │
## │ 7   │ 0.700238 │ 0.786655 │ 0.562224  │ 0.749034  │ 0.711743  │ 0.566816 │
## ⋮
## │ 23  │ 0.766506 │ 0.863715 │ 0.612546  │ 0.186932  │ 0.119215  │ 0.549382 │
## │ 24  │ 0.905858 │ 0.536041 │ 0.36865   │ 0.297921  │ 0.0734077 │ 0.60348  │
## │ 25  │ 0.896458 │ 0.525111 │ 0.736733  │ 0.533072  │ 0.49343   │ 0.577507 │
## │ 26  │ 0.74681  │ 0.975108 │ 0.612138  │ 0.219238  │ 0.221016  │ 0.648086 │
## │ 27  │ 0.84517  │ 0.72699  │ 0.817828  │ 0.859017  │ 0.886562  │ 0.52091  │
## │ 28  │ 0.697337 │ 0.766387 │ 0.063506  │ 0.266147  │ 0.0594699 │ 0.655208 │
## │ 29  │ 0.811991 │ 0.521148 │ 0.978935  │ 0.0962431 │ 0.477039  │ 0.935685 │
## │ 30  │ 0.610947 │ 0.924053 │ 0.457472  │ 0.189614  │ 0.130914  │ 0.9066   │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Subsetting cond01 OR cond02:
foo[.|(cond01, cond02), :]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 75×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1       │ x2        │ x3        │ x4        │ x5         │ x6       │
## │     │ Float64  │ Float64   │ Float64   │ Float64   │ Float64    │ Float64  │
## ├─────┼──────────┼───────────┼───────────┼───────────┼────────────┼──────────┤
## │ 1   │ 0.140327 │ 0.658589  │ 0.939219  │ 0.892338  │ 0.864097   │ 0.488121 │
## │ 2   │ 0.623908 │ 0.483838  │ 0.393936  │ 0.197214  │ 0.813324   │ 0.69291  │
## │ 3   │ 0.816734 │ 0.198471  │ 0.424787  │ 0.505844  │ 0.120509   │ 0.843966 │
## │ 4   │ 0.925035 │ 0.891901  │ 0.0196221 │ 0.994771  │ 0.142404   │ 0.471003 │
## │ 5   │ 0.823948 │ 0.810748  │ 0.691364  │ 0.443197  │ 0.447084   │ 0.165229 │
## │ 6   │ 0.754705 │ 0.0969488 │ 0.3837    │ 0.927363  │ 0.00523009 │ 0.184971 │
## │ 7   │ 0.768552 │ 0.847732  │ 0.850599  │ 0.775429  │ 0.146704   │ 0.601648 │
## ⋮
## │ 68  │ 0.65145  │ 0.247612  │ 0.970007  │ 0.486396  │ 0.397107   │ 0.355256 │
## │ 69  │ 0.697337 │ 0.766387  │ 0.063506  │ 0.266147  │ 0.0594699  │ 0.655208 │
## │ 70  │ 0.424821 │ 0.821294  │ 0.409617  │ 0.699104  │ 0.215349   │ 0.579652 │
## │ 71  │ 0.255547 │ 0.941036  │ 0.439767  │ 0.94476   │ 0.196473   │ 0.013604 │
## │ 72  │ 0.811991 │ 0.521148  │ 0.978935  │ 0.0962431 │ 0.477039   │ 0.935685 │
## │ 73  │ 0.560213 │ 0.957808  │ 0.174333  │ 0.148671  │ 0.318692   │ 0.98489  │
## │ 74  │ 0.610947 │ 0.924053  │ 0.457472  │ 0.189614  │ 0.130914   │ 0.9066   │
## │ 75  │ 0.819324 │ 0.503031  │ 0.642566  │ 0.400579  │ 0.48958    │ 0.938605 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In Julia, instead of the syntax &lt;em&gt;condition1 &amp;amp; condition2&lt;/em&gt;, which is more common in
other programming languages, we use &lt;code&gt;&amp;amp;(condition1, condition2)&lt;/code&gt; or
&lt;code&gt;|(condition1, condition2)&lt;/code&gt; operators to perform multiple conditional
filtering.&lt;/p&gt;
&lt;p&gt;Now, let’s say you have a DataFrame and you want to &lt;strong&gt;append&lt;/strong&gt; rows to it.
There are a couple of ways of doing data. The first one is to use the &lt;code&gt;[data1; data2]&lt;/code&gt;
syntax:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Creating a DataFrame with 3 rows and 5 columns:
x = DataFrame(rand(3, 5));
## Let&amp;#39;s add another line using [dataset1; dataset2] syntax:
[ x ; DataFrame(rand(1, 5)) ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4×5 DataFrame
## │ Row │ x1        │ x2       │ x3       │ x4       │ x5       │
## │     │ Float64   │ Float64  │ Float64  │ Float64  │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼──────────┼──────────┤
## │ 1   │ 0.781634  │ 0.268748 │ 0.201616 │ 0.155548 │ 0.847927 │
## │ 2   │ 0.97402   │ 0.275633 │ 0.908448 │ 0.888171 │ 0.580651 │
## │ 3   │ 0.0180846 │ 0.815301 │ 0.466414 │ 0.19762  │ 0.926424 │
## │ 4   │ 0.503171  │ 0.508911 │ 0.887655 │ 0.115622 │ 0.294041 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could get the same result using the &lt;code&gt;vcat()&lt;/code&gt; function. According to the
documentation, &lt;code&gt;vcat()&lt;/code&gt; performs &lt;em&gt;concatenation along dimension 1&lt;/em&gt;, which means
it will concatenate rows. The syntax would be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## taking the first 2 lines and append with the third one:
vcat(x[1:2, :] , x[3, :])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to do that is using the function &lt;code&gt;append!()&lt;/code&gt;. This function will append
a new row to the last row in a given DataFrame. Note that the column names &lt;strong&gt;must&lt;/strong&gt;
match exactly.&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Column names matches
append!(x, DataFrame(rand(1, 5)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4×5 DataFrame
## │ Row │ x1        │ x2       │ x3       │ x4       │ x5       │
## │     │ Float64   │ Float64  │ Float64  │ Float64  │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼──────────┼──────────┤
## │ 1   │ 0.781634  │ 0.268748 │ 0.201616 │ 0.155548 │ 0.847927 │
## │ 2   │ 0.97402   │ 0.275633 │ 0.908448 │ 0.888171 │ 0.580651 │
## │ 3   │ 0.0180846 │ 0.815301 │ 0.466414 │ 0.19762  │ 0.926424 │
## │ 4   │ 0.885118  │ 0.830961 │ 0.198043 │ 0.634828 │ 0.606813 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if the column names between two DataFrames do not match , the &lt;code&gt;append!()&lt;/code&gt;
function is going to throw an error. Although this kind of behavior is important
when we want to control for possible side effects, we might also prefer to not worry about
this and “&lt;em&gt;force&lt;/em&gt;” the append procedure. In order to do this we can make use of
the &lt;code&gt;push!()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## providing an Array:
push!(x, rand(ncol(x)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5×5 DataFrame
## │ Row │ x1        │ x2       │ x3       │ x4       │ x5       │
## │     │ Float64   │ Float64  │ Float64  │ Float64  │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼──────────┼──────────┤
## │ 1   │ 0.781634  │ 0.268748 │ 0.201616 │ 0.155548 │ 0.847927 │
## │ 2   │ 0.97402   │ 0.275633 │ 0.908448 │ 0.888171 │ 0.580651 │
## │ 3   │ 0.0180846 │ 0.815301 │ 0.466414 │ 0.19762  │ 0.926424 │
## │ 4   │ 0.885118  │ 0.830961 │ 0.198043 │ 0.634828 │ 0.606813 │
## │ 5   │ 0.815456  │ 0.129319 │ 0.446811 │ 0.540385 │ 0.600008 │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## providing an dictionary:
push!(x, Dict(:x1 =&amp;gt; rand(),
              :x2 =&amp;gt; rand(),
              :x3 =&amp;gt; rand(),
              :x4 =&amp;gt; rand(),
              :x5 =&amp;gt; rand()))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 6×5 DataFrame
## │ Row │ x1        │ x2       │ x3       │ x4       │ x5       │
## │     │ Float64   │ Float64  │ Float64  │ Float64  │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼──────────┼──────────┤
## │ 1   │ 0.781634  │ 0.268748 │ 0.201616 │ 0.155548 │ 0.847927 │
## │ 2   │ 0.97402   │ 0.275633 │ 0.908448 │ 0.888171 │ 0.580651 │
## │ 3   │ 0.0180846 │ 0.815301 │ 0.466414 │ 0.19762  │ 0.926424 │
## │ 4   │ 0.885118  │ 0.830961 │ 0.198043 │ 0.634828 │ 0.606813 │
## │ 5   │ 0.815456  │ 0.129319 │ 0.446811 │ 0.540385 │ 0.600008 │
## │ 6   │ 0.996147  │ 0.187008 │ 0.834357 │ 0.438062 │ 0.684835 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we can see, this function also accepts that we give a dictionary or an array
to append to a DataFrame.&lt;/p&gt;
&lt;p&gt;So, there are at least 4 methods to add rows to a DataFrame. Which one to use?
Let’s see how fast it is each function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;using BenchmarkTools
@btime [x ; DataFrame(rand(1, 5))];
@btime vcat(x, DataFrame(rand(1, 5)));
@btime append!(x, DataFrame(rand(1, 5)));
@btime push!(x, rand(1, 5));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulating-columns&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulating Columns:&lt;/h2&gt;
&lt;p&gt;One of the first things we would want to do when working with a dataset is selecting
some columns. In Julia, the syntax of selecting columns in DataFrames is similar to the one
used in &lt;em&gt;Matlab/Octave&lt;/em&gt;. For instance, we can make use of the &lt;strong&gt;“:”&lt;/strong&gt; symbol to represent
that we want all columns (or all rows) and/or a sequence of them:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Taking all rows of the first 2 columns:
foo[:, 1:2]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100×2 DataFrame
## │ Row │ x1        │ x2       │
## │     │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │
## │ 2   │ 0.623908  │ 0.483838 │
## │ 3   │ 0.16832   │ 0.362292 │
## │ 4   │ 0.507221  │ 0.320803 │
## │ 5   │ 0.0681251 │ 0.496204 │
## │ 6   │ 0.0138614 │ 0.210695 │
## │ 7   │ 0.816734  │ 0.198471 │
## ⋮
## │ 93  │ 0.65145   │ 0.247612 │
## │ 94  │ 0.697337  │ 0.766387 │
## │ 95  │ 0.424821  │ 0.821294 │
## │ 96  │ 0.255547  │ 0.941036 │
## │ 97  │ 0.811991  │ 0.521148 │
## │ 98  │ 0.560213  │ 0.957808 │
## │ 99  │ 0.610947  │ 0.924053 │
## │ 100 │ 0.819324  │ 0.503031 │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Taking the first 10 rows of all columns:
foo[1:10, :]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 10×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1        │ x2       │ x3        │ x4        │ x5        │ x6       │
## │     │ Float64   │ Float64  │ Float64   │ Float64   │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┼───────────┼───────────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │ 0.939219  │ 0.892338  │ 0.864097  │ 0.488121 │
## │ 2   │ 0.623908  │ 0.483838 │ 0.393936  │ 0.197214  │ 0.813324  │ 0.69291  │
## │ 3   │ 0.16832   │ 0.362292 │ 0.156968  │ 0.461822  │ 0.0627343 │ 0.220052 │
## │ 4   │ 0.507221  │ 0.320803 │ 0.453834  │ 0.0216875 │ 0.316135  │ 0.321148 │
## │ 5   │ 0.0681251 │ 0.496204 │ 0.911449  │ 0.018065  │ 0.606398  │ 0.942852 │
## │ 6   │ 0.0138614 │ 0.210695 │ 0.223389  │ 0.511162  │ 0.20312   │ 0.833942 │
## │ 7   │ 0.816734  │ 0.198471 │ 0.424787  │ 0.505844  │ 0.120509  │ 0.843966 │
## │ 8   │ 0.126076  │ 0.217074 │ 0.449965  │ 0.465875  │ 0.173435  │ 0.556438 │
## │ 9   │ 0.925035  │ 0.891901 │ 0.0196221 │ 0.994771  │ 0.142404  │ 0.471003 │
## │ 10  │ 0.823948  │ 0.810748 │ 0.691364  │ 0.443197  │ 0.447084  │ 0.165229 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, we can select a column by using its name as a symbol or using the “.” operator:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## take the column x1 using &amp;quot;.&amp;quot; operator:
foo.x1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100-element Array{Float64,1}:
##  0.14032679327872133 
##  0.6239084041912495  
##  0.16832018466968424 
##  0.5072208286590454  
##  0.06812505238590272 
##  0.013861427008587723
##  0.8167344518183903  
##  0.12607608347996124 
##  0.9250345423840531  
##  0.8239479140028969  
##  ⋮                   
##  0.8451698181476779  
##  0.6514503229292374  
##  0.6973367795156771  
##  0.42482064243332807 
##  0.25554707582082337 
##  0.8119913842578168  
##  0.5602126253875677  
##  0.610946674772882   
##  0.8193243941311592&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Take the column using &amp;quot;x1&amp;quot; as a symbol:
foo[:x1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100-element Array{Float64,1}:
##  0.14032679327872133 
##  0.6239084041912495  
##  0.16832018466968424 
##  0.5072208286590454  
##  0.06812505238590272 
##  0.013861427008587723
##  0.8167344518183903  
##  0.12607608347996124 
##  0.9250345423840531  
##  0.8239479140028969  
##  ⋮                   
##  0.8451698181476779  
##  0.6514503229292374  
##  0.6973367795156771  
##  0.42482064243332807 
##  0.25554707582082337 
##  0.8119913842578168  
##  0.5602126253875677  
##  0.610946674772882   
##  0.8193243941311592&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the return will be an Array. To select one or more column and return
them as a DataFrame type, we use the double brackets syntax:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;using DataFramesMeta
## take column x1 as DataFrame
@linq foo[[:x1]] |&amp;gt; first(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5×1 DataFrame
## │ Row │ x1        │
## │     │ Float64   │
## ├─────┼───────────┤
## │ 1   │ 0.140327  │
## │ 2   │ 0.623908  │
## │ 3   │ 0.16832   │
## │ 4   │ 0.507221  │
## │ 5   │ 0.0681251 │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Take column x1 an x2:
@linq foo[[:x1, :x2]] |&amp;gt; first(5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5×2 DataFrame
## │ Row │ x1        │ x2       │
## │     │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │
## │ 2   │ 0.623908  │ 0.483838 │
## │ 3   │ 0.16832   │ 0.362292 │
## │ 4   │ 0.507221  │ 0.320803 │
## │ 5   │ 0.0681251 │ 0.496204 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are some new things here. The &lt;code&gt;first()&lt;/code&gt; function aims to just show the first
lines of our dataset. Similarly, &lt;code&gt;last()&lt;/code&gt; performs the same, but showing us the last
lines. Also, you may have noticed the use of the &lt;strong&gt;“|&amp;gt;”&lt;/strong&gt; operator. This is the
&lt;strong&gt;pipe&lt;/strong&gt; symbol in Julia. If you are familiar with &lt;strong&gt;R&lt;/strong&gt; programming language, it
works similarly to the &lt;strong&gt;“%&amp;gt;%”&lt;/strong&gt; operator from &lt;em&gt;magrittr&lt;/em&gt; package, but with some
limitations. For example, we can not pipe to a specific argument in a
subsequent function, so that’s why the use of &lt;strong&gt;&lt;span class=&#34;citation&#34;&gt;@linq&lt;/span&gt;&lt;/strong&gt; from &lt;strong&gt;DataFramesMeta&lt;/strong&gt;
package. For now just take these commands for granted. In another post I will show
how to use the functionalities of the metaprogramming tools for &lt;strong&gt;DataFrames&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Another trivial task we can perform with column is to add or alter columns in a
DataFrame. For example, let’s create a new column which will be a sequence between
1 and until 100 by 0.5:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## To create a sequence, use the function range():
foo[:new_column] = range(1, step = 0.5, length = nrow(foo));
foo[:, :new_column]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100-element Array{Float64,1}:
##   1.0
##   1.5
##   2.0
##   2.5
##   3.0
##   3.5
##   4.0
##   4.5
##   5.0
##   5.5
##   ⋮  
##  46.5
##  47.0
##  47.5
##  48.0
##  48.5
##  49.0
##  49.5
##  50.0
##  50.5&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also add column using the &lt;code&gt;insertcols!()&lt;/code&gt; function. The syntax allow us to
specify in which position we want to add the column in the DataFrame:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## syntax: insert!(dataset, position, column_name =&amp;gt; array)
insertcols!(foo, 2, :new_colum2 =&amp;gt; range(1, step = 0.5, length = nrow(foo)));
first(foo,&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the use of the &lt;strong&gt;“!”&lt;/strong&gt; in &lt;code&gt;insertcols!()&lt;/code&gt; function. This means that the function
is altering the object in memory rather than in a “virtual copy” that later needs
to be assigned to a new variable. This is a behavior that can be used in other function
as well.&lt;/p&gt;
&lt;p&gt;Ok… But what if you want to do the opposite? that is, to remove a column?
Well… it is just as easy as to add it. Just use the &lt;code&gt;deletecols!()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;deletecols!(foo, [:new_column, :new_colum2])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100×10 DataFrame. Omitted printing of 4 columns
## │ Row │ x1        │ x2       │ x3       │ x4        │ x5        │ x6       │
## │     │ Float64   │ Float64  │ Float64  │ Float64   │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼───────────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │ 0.939219 │ 0.892338  │ 0.864097  │ 0.488121 │
## │ 2   │ 0.623908  │ 0.483838 │ 0.393936 │ 0.197214  │ 0.813324  │ 0.69291  │
## │ 3   │ 0.16832   │ 0.362292 │ 0.156968 │ 0.461822  │ 0.0627343 │ 0.220052 │
## │ 4   │ 0.507221  │ 0.320803 │ 0.453834 │ 0.0216875 │ 0.316135  │ 0.321148 │
## │ 5   │ 0.0681251 │ 0.496204 │ 0.911449 │ 0.018065  │ 0.606398  │ 0.942852 │
## │ 6   │ 0.0138614 │ 0.210695 │ 0.223389 │ 0.511162  │ 0.20312   │ 0.833942 │
## │ 7   │ 0.816734  │ 0.198471 │ 0.424787 │ 0.505844  │ 0.120509  │ 0.843966 │
## ⋮
## │ 93  │ 0.65145   │ 0.247612 │ 0.970007 │ 0.486396  │ 0.397107  │ 0.355256 │
## │ 94  │ 0.697337  │ 0.766387 │ 0.063506 │ 0.266147  │ 0.0594699 │ 0.655208 │
## │ 95  │ 0.424821  │ 0.821294 │ 0.409617 │ 0.699104  │ 0.215349  │ 0.579652 │
## │ 96  │ 0.255547  │ 0.941036 │ 0.439767 │ 0.94476   │ 0.196473  │ 0.013604 │
## │ 97  │ 0.811991  │ 0.521148 │ 0.978935 │ 0.0962431 │ 0.477039  │ 0.935685 │
## │ 98  │ 0.560213  │ 0.957808 │ 0.174333 │ 0.148671  │ 0.318692  │ 0.98489  │
## │ 99  │ 0.610947  │ 0.924053 │ 0.457472 │ 0.189614  │ 0.130914  │ 0.9066   │
## │ 100 │ 0.819324  │ 0.503031 │ 0.642566 │ 0.400579  │ 0.48958   │ 0.938605 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now suppose that you do not want to delete a colum, but just change its name.
For this task, I am afraid there is a very difficult function to remember
the name: &lt;code&gt;rename()&lt;/code&gt;. The syntax is as follows:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## rename(dataFrame, :old_name =&amp;gt; :new_name)
rename(foo, :x1 =&amp;gt; :A1, :x2 =&amp;gt; :A2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 100×10 DataFrame. Omitted printing of 4 columns
## │ Row │ A1        │ A2       │ x3       │ x4        │ x5        │ x6       │
## │     │ Float64   │ Float64  │ Float64  │ Float64   │ Float64   │ Float64  │
## ├─────┼───────────┼──────────┼──────────┼───────────┼───────────┼──────────┤
## │ 1   │ 0.140327  │ 0.658589 │ 0.939219 │ 0.892338  │ 0.864097  │ 0.488121 │
## │ 2   │ 0.623908  │ 0.483838 │ 0.393936 │ 0.197214  │ 0.813324  │ 0.69291  │
## │ 3   │ 0.16832   │ 0.362292 │ 0.156968 │ 0.461822  │ 0.0627343 │ 0.220052 │
## │ 4   │ 0.507221  │ 0.320803 │ 0.453834 │ 0.0216875 │ 0.316135  │ 0.321148 │
## │ 5   │ 0.0681251 │ 0.496204 │ 0.911449 │ 0.018065  │ 0.606398  │ 0.942852 │
## │ 6   │ 0.0138614 │ 0.210695 │ 0.223389 │ 0.511162  │ 0.20312   │ 0.833942 │
## │ 7   │ 0.816734  │ 0.198471 │ 0.424787 │ 0.505844  │ 0.120509  │ 0.843966 │
## ⋮
## │ 93  │ 0.65145   │ 0.247612 │ 0.970007 │ 0.486396  │ 0.397107  │ 0.355256 │
## │ 94  │ 0.697337  │ 0.766387 │ 0.063506 │ 0.266147  │ 0.0594699 │ 0.655208 │
## │ 95  │ 0.424821  │ 0.821294 │ 0.409617 │ 0.699104  │ 0.215349  │ 0.579652 │
## │ 96  │ 0.255547  │ 0.941036 │ 0.439767 │ 0.94476   │ 0.196473  │ 0.013604 │
## │ 97  │ 0.811991  │ 0.521148 │ 0.978935 │ 0.0962431 │ 0.477039  │ 0.935685 │
## │ 98  │ 0.560213  │ 0.957808 │ 0.174333 │ 0.148671  │ 0.318692  │ 0.98489  │
## │ 99  │ 0.610947  │ 0.924053 │ 0.457472 │ 0.189614  │ 0.130914  │ 0.9066   │
## │ 100 │ 0.819324  │ 0.503031 │ 0.642566 │ 0.400579  │ 0.48958   │ 0.938605 │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We could also add the &lt;strong&gt;“!”&lt;/strong&gt; to the &lt;code&gt;rename()&lt;/code&gt; function to alter the DataFrame
in memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lets-talk-about-missing-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let’s talk about missing values:&lt;/h2&gt;
&lt;p&gt;Missing values are represented in Julia with &lt;strong&gt;missing&lt;/strong&gt; value. When an array
contains missing values, it automatically creates an appropriate union type:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;x = [1.0, 2.0, missing]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element Array{Union{Missing, Float64},1}:
##  1.0     
##  2.0     
##   missing&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;typeof(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Array{Union{Missing, Float64},1}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;typeof.(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element Array{DataType,1}:
##  Float64
##  Float64
##  Missing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check if a particular element in an array is missing, we use the &lt;code&gt;ismissing()&lt;/code&gt;
function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;ismissing.([1.0, 2.0, missing])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element BitArray{1}:
##  false
##  false
##   true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to notice that &lt;em&gt;missing&lt;/em&gt; comparison produces &lt;em&gt;missing&lt;/em&gt; as a result:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;missing == missing&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;isequal&lt;/strong&gt; and &lt;strong&gt;===&lt;/strong&gt; can be used to produce the results of type &lt;em&gt;Bool&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;isequal(missing, missing)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## true&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;missing === missing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## true&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other functions are available to work with missing values. For instance, suppose
we want an array with only non-missing values, we use the &lt;code&gt;skipmissing()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;x |&amp;gt; skipmissing |&amp;gt; collect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2-element Array{Float64,1}:
##  1.0
##  2.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we use the &lt;code&gt;collect()&lt;/code&gt; function as the &lt;code&gt;skipmissing()&lt;/code&gt; returns an iterator.&lt;/p&gt;
&lt;p&gt;To replace the missing values with some other value we can use the
&lt;code&gt;Missings.replace()&lt;/code&gt; function. For example, suppose we want to change the missing
values by &lt;em&gt;NaN&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;Missings.replace(x, NaN) |&amp;gt; collect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element Array{Float64,1}:
##    1.0
##    2.0
##  NaN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We also can use use other ways to perform the same operation:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Using coalesce() function:
coalesce.(x, NaN)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element Array{Float64,1}:
##    1.0
##    2.0
##  NaN&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Using recode() function:
recode(x, missing =&amp;gt; NaN)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3-element Array{Float64,1}:
##    1.0
##    2.0
##  NaN&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Until now, we have only talked about missing values in arrays. But what about missing
values in DataFrames? To start, let’s create a DataFrame with some missing values:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;x = DataFrame(A = [1, missing, 3, 4], B = [&amp;quot;A&amp;quot;, &amp;quot;B&amp;quot;, missing, &amp;quot;C&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 4×2 DataFrame
## │ Row │ A       │ B       │
## │     │ Int64⍰  │ String⍰ │
## ├─────┼─────────┼─────────┤
## │ 1   │ 1       │ A       │
## │ 2   │ missing │ B       │
## │ 3   │ 3       │ missing │
## │ 4   │ 4       │ C       │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For some analysis, we would want only the rows with non-missing values. One way
to achieve this is making use of the &lt;code&gt;completecases()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;x[completecases(x), :]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×2 DataFrame
## │ Row │ A      │ B       │
## │     │ Int64⍰ │ String⍰ │
## ├─────┼────────┼─────────┤
## │ 1   │ 1      │ A       │
## │ 2   │ 4      │ C       │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;completecases()&lt;/code&gt; function returns an boolean array with value &lt;em&gt;true&lt;/em&gt; for
rows that have non-missing values and &lt;em&gt;false&lt;/em&gt; otherwise. For those who are familiar
with &lt;strong&gt;R&lt;/strong&gt;, this is the same behavior as the &lt;em&gt;complete.cases()&lt;/em&gt; function from &lt;em&gt;stats&lt;/em&gt; package.&lt;/p&gt;
&lt;p&gt;Another option to return the rows with non-missing values of a DataFrame in Julia
is to use the &lt;code&gt;dropmissing()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;dropmissing(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×2 DataFrame
## │ Row │ A      │ B       │
## │     │ Int64⍰ │ String⍰ │
## ├─────┼────────┼─────────┤
## │ 1   │ 1      │ A       │
## │ 2   │ 4      │ C       │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and again, for &lt;strong&gt;R&lt;/strong&gt; users is the same behaviro as &lt;em&gt;na.omit()&lt;/em&gt; function.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;merging-dataframes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Merging DataFrames:&lt;/h2&gt;
&lt;p&gt;Often, we need to combine two or more DataFrames together based on some common
column(s) among them. For example, suppose we have two DataFrames:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;df1 = DataFrame(x = 1:3, y = 4:6)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×2 DataFrame
## │ Row │ x     │ y     │
## │     │ Int64 │ Int64 │
## ├─────┼───────┼───────┤
## │ 1   │ 1     │ 4     │
## │ 2   │ 2     │ 5     │
## │ 3   │ 3     │ 6     │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;df2 = DataFrame(x = 1:3, z = &amp;#39;d&amp;#39;:&amp;#39;f&amp;#39;, new = 11:13)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×3 DataFrame
## │ Row │ x     │ z    │ new   │
## │     │ Int64 │ Char │ Int64 │
## ├─────┼───────┼──────┼───────┤
## │ 1   │ 1     │ &amp;#39;d&amp;#39;  │ 11    │
## │ 2   │ 2     │ &amp;#39;e&amp;#39;  │ 12    │
## │ 3   │ 3     │ &amp;#39;f&amp;#39;  │ 13    │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which have the column &lt;em&gt;x&lt;/em&gt; in common. To merge these two tables, we use the
&lt;code&gt;join()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(df1, df2, on = :x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×4 DataFrame
## │ Row │ x     │ y     │ z    │ new   │
## │     │ Int64 │ Int64 │ Char │ Int64 │
## ├─────┼───────┼───────┼──────┼───────┤
## │ 1   │ 1     │ 4     │ &amp;#39;d&amp;#39;  │ 11    │
## │ 2   │ 2     │ 5     │ &amp;#39;e&amp;#39;  │ 12    │
## │ 3   │ 3     │ 6     │ &amp;#39;f&amp;#39;  │ 13    │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That’s it!! We merge our DataFrames altogether. But that’s the default behavior of
the function. There is more to explore. Essentially, &lt;code&gt;join()&lt;/code&gt; takes 4 arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrame 1&lt;/li&gt;
&lt;li&gt;DataFrame 2&lt;/li&gt;
&lt;li&gt;on = the column(s) to be the key in merging;&lt;/li&gt;
&lt;li&gt;kind = type of the merge (left, right, inner, outer, …)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;em&gt;kind&lt;/em&gt; argument specifies the type of join we are interested in performing.
The definition of each one is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Inner&lt;/em&gt;: The output contains rows for values of the key that exist
in &lt;strong&gt;BOTH&lt;/strong&gt; the first (left) and second (right) arguments to
join;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Left&lt;/em&gt;: The output contains rows for values of the key that exist in
the first (left) argument to join, whether or not that value
exists in the second (right) argument;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Right&lt;/em&gt;: The output contains rows for values of the key that exist in
the second (right) argument to join, whether or not that
value exists in the first (left) argument;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Outer&lt;/em&gt;: The output contains rows for values of the key that exist in
the first (left) &lt;strong&gt;OR&lt;/strong&gt; second (right) argument to join;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and here are the “&lt;em&gt;strange&lt;/em&gt;” ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Semi&lt;/em&gt;: Like an inner join, but output is restricted to columns from
the first (left) argument to join;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Anti&lt;/em&gt;: The output contains rows for values of the key that exist in
the first (left) but &lt;strong&gt;NOT&lt;/strong&gt; in the second (right) argument to
join. As with semi joins, output is restricted to columns
from the first (left) argument.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are familiar with &lt;em&gt;SQL&lt;/em&gt; or with the join functions from &lt;em&gt;dplyr&lt;/em&gt; package in &lt;strong&gt;R&lt;/strong&gt;,
it is the same concept.&lt;/p&gt;
&lt;p&gt;To illustrate how the different kind of joins work, let’s create more DataFrames
to demonstrate each type of join:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;Names = DataFrame(ID = [20, 40], Name = [&amp;quot;John Doe&amp;quot;, &amp;quot;Jane Doe&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×2 DataFrame
## │ Row │ ID    │ Name     │
## │     │ Int64 │ String   │
## ├─────┼───────┼──────────┤
## │ 1   │ 20    │ John Doe │
## │ 2   │ 40    │ Jane Doe │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;jobs = DataFrame(ID = [20, 60], Job = [&amp;quot;Lawyer&amp;quot;, &amp;quot;Astronaut&amp;quot;])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×2 DataFrame
## │ Row │ ID    │ Job       │
## │     │ Int64 │ String    │
## ├─────┼───────┼───────────┤
## │ 1   │ 20    │ Lawyer    │
## │ 2   │ 60    │ Astronaut │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the Names and jobs DataFrame, we have the ID column as the key to perform the
join. But notice that the ID values are not equal between the DataFrames. Now
let’s perform the joins:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :inner)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1×3 DataFrame
## │ Row │ ID    │ Name     │ Job    │
## │     │ Int64 │ String   │ String │
## ├─────┼───────┼──────────┼────────┤
## │ 1   │ 20    │ John Doe │ Lawyer │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :left)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×3 DataFrame
## │ Row │ ID    │ Name     │ Job     │
## │     │ Int64 │ String   │ String⍰ │
## ├─────┼───────┼──────────┼─────────┤
## │ 1   │ 20    │ John Doe │ Lawyer  │
## │ 2   │ 40    │ Jane Doe │ missing │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :right)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 2×3 DataFrame
## │ Row │ ID    │ Name     │ Job       │
## │     │ Int64 │ String⍰  │ String    │
## ├─────┼───────┼──────────┼───────────┤
## │ 1   │ 20    │ John Doe │ Lawyer    │
## │ 2   │ 60    │ missing  │ Astronaut │&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :outer)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×3 DataFrame
## │ Row │ ID    │ Name     │ Job       │
## │     │ Int64 │ String⍰  │ String⍰   │
## ├─────┼───────┼──────────┼───────────┤
## │ 1   │ 20    │ John Doe │ Lawyer    │
## │ 2   │ 40    │ Jane Doe │ missing   │
## │ 3   │ 60    │ missing  │ Astronaut │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Semi&lt;/em&gt; and &lt;em&gt;anti&lt;/em&gt; join have a more uncommon behavior. Semi join returns the rows
from the left which &lt;strong&gt;DO MATCH&lt;/strong&gt; with the ID from the right:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :semi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1×2 DataFrame
## │ Row │ ID    │ Name     │
## │     │ Int64 │ String   │
## ├─────┼───────┼──────────┤
## │ 1   │ 20    │ John Doe │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anti join returns the rows from the left which &lt;strong&gt;DO NOT MATCH&lt;/strong&gt; with
the ID from the right&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;join(Names, jobs, on = :ID, kind = :anti)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 1×2 DataFrame
## │ Row │ ID    │ Name     │
## │     │ Int64 │ String   │
## ├─────┼───────┼──────────┤
## │ 1   │ 40    │ Jane Doe │&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;split-apply-combine&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Split-Apply-Combine:&lt;/h2&gt;
&lt;p&gt;Some common tasks involve splitting the data into groups, applying some function
to each of these groups and gathering the results to analyze later on. This is the
split-apply-combine strategy described in the paper “&lt;a href=&#34;https://www.jstatsoft.org/article/view/v040i01&#34;&gt;The Split-Apply-Combine Strategy for Data analysis&lt;/a&gt;” written by Hadley Wickham, creator
of many &lt;strong&gt;R&lt;/strong&gt; packages, including &lt;em&gt;ggplot2&lt;/em&gt; and &lt;em&gt;dplyr&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The DataFrames package in Julia supports the &lt;strong&gt;Split-Apply-Combine&lt;/strong&gt; strategy
through the &lt;code&gt;by()&lt;/code&gt; function, which takes three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrame;&lt;/li&gt;
&lt;li&gt;one or more column names to split on;&lt;/li&gt;
&lt;li&gt;a function or expression to apply to each subset;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To illustrate its usage, let’s make use of the &lt;em&gt;RDatasets&lt;/em&gt; package, which gives
access to some preloaded well known datasets from R packages.&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;using RDatasets
foo = dataset(&amp;quot;datasets&amp;quot;, &amp;quot;iris&amp;quot;);
first(foo, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 5×5 DataFrame
## │ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species      │
## │     │ Float64     │ Float64    │ Float64     │ Float64    │ Categorical… │
## ├─────┼─────────────┼────────────┼─────────────┼────────────┼──────────────┤
## │ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa       │
## │ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa       │
## │ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ setosa       │
## │ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ setosa       │
## │ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ setosa       │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A trivial task is to find how many of each “Species” there are in the
dataset. One way to do this is to apply the &lt;strong&gt;Split-Apply-Combine&lt;/strong&gt; strategy: &lt;strong&gt;split&lt;/strong&gt;
the data into the &lt;em&gt;Species&lt;/em&gt; column, &lt;strong&gt;apply&lt;/strong&gt; the &lt;code&gt;nrow()&lt;/code&gt; function to this
splitted dataset, and &lt;strong&gt;combine&lt;/strong&gt; the results:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Syntax: by(dataset, :name_column_to_split, name_function)
by(foo, :Species, nrow)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×2 DataFrame
## │ Row │ Species      │ x1    │
## │     │ Categorical… │ Int64 │
## ├─────┼──────────────┼───────┤
## │ 1   │ setosa       │ 50    │
## │ 2   │ versicolor   │ 50    │
## │ 3   │ virginica    │ 50    │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can also make use of &lt;strong&gt;anonymous&lt;/strong&gt; function:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;by(foo, :Species, x -&amp;gt; DataFrame(N = nrow(x)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×2 DataFrame
## │ Row │ Species      │ N     │
## │     │ Categorical… │ Int64 │
## ├─────┼──────────────┼───────┤
## │ 1   │ setosa       │ 50    │
## │ 2   │ versicolor   │ 50    │
## │ 3   │ virginica    │ 50    │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One of the advantages of using anonymous function inside the &lt;code&gt;by()&lt;/code&gt; function is
that we can format the resulted output and apply as many function as we want:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;## Applying the count, mean and standard deviation function:
by(foo, :Species, x -&amp;gt; DataFrame(N = nrow(x),
                                 avg_PetalLength = mean(x[:PetalLength]),
                                 std_PetalWidth = std(x[:PetalWidth])))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×4 DataFrame
## │ Row │ Species      │ N     │ avg_PetalLength │ std_PetalWidth │
## │     │ Categorical… │ Int64 │ Float64         │ Float64        │
## ├─────┼──────────────┼───────┼─────────────────┼────────────────┤
## │ 1   │ setosa       │ 50    │ 1.462           │ 0.105386       │
## │ 2   │ versicolor   │ 50    │ 4.26            │ 0.197753       │
## │ 3   │ virginica    │ 50    │ 5.552           │ 0.27465        │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way to use the &lt;strong&gt;Split-Apply-Combine&lt;/strong&gt; strategy is implementing the
&lt;code&gt;aggregate()&lt;/code&gt; function, which also takes three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DataFrame;&lt;/li&gt;
&lt;li&gt;one or more column names to split on;&lt;/li&gt;
&lt;li&gt;one or more function to be applied &lt;strong&gt;ON THE COLUMNS NOT USED TO SPLIT&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The difference between &lt;code&gt;by()&lt;/code&gt; and &lt;code&gt;aggregate()&lt;/code&gt; function is that in the
latter, the function(s) will be applied to each column not used in
the split part.&lt;/p&gt;
&lt;p&gt;For instance, let’s say you want the average of each colum for each &lt;em&gt;Species&lt;/em&gt;.
Instead of using &lt;code&gt;by()&lt;/code&gt; with an anonymous function and writing the name of all columns
we can do:&lt;/p&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;aggregate(foo, :Species, [mean])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 3×5 DataFrame. Omitted printing of 1 columns
## │ Row │ Species      │ SepalLength_mean │ SepalWidth_mean │ PetalLength_mean │
## │     │ Categorical… │ Float64          │ Float64         │ Float64          │
## ├─────┼──────────────┼──────────────────┼─────────────────┼──────────────────┤
## │ 1   │ setosa       │ 5.006            │ 3.428           │ 1.462            │
## │ 2   │ versicolor   │ 5.936            │ 2.77            │ 4.26             │
## │ 3   │ virginica    │ 6.588            │ 2.974           │ 5.552            │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that Julia only display output that fits the screen. Pay
attention to the message “&lt;em&gt;Omitted printing of 1 columns&lt;/em&gt;”. To
overcome this, use the &lt;code&gt;show()&lt;/code&gt; as advised before.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;reading-and-writting-csv-files&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Reading and Writting CSV files:&lt;/h1&gt;
&lt;p&gt;Last but not least, let’s see how to read and write CSV files into/from Julia.
Although this is not exactly handled by the &lt;em&gt;DataFrames&lt;/em&gt; package, the task of
reading/writing CSV files are so natural when working with DataFrame that I will
show you the basics.&lt;/p&gt;
&lt;p&gt;To read/write CSV files, we use the &lt;strong&gt;CSV&lt;/strong&gt; package. To demonstrate its usage,
let’s work with the iris dataset and write a CSV file to a local computer. Then,
we read it back.&lt;/p&gt;
&lt;p&gt;So, first we are going to write the &lt;em&gt;foo&lt;/em&gt; object (which contains the &lt;em&gt;iris&lt;/em&gt; dataset)
to a CSV file. To do this we will use the &lt;code&gt;CSV.write()&lt;/code&gt; function. Some useful
arguments in CSV.write are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;delim&lt;/em&gt; : the file’s delimeter. Default ‘,’;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;header&lt;/em&gt; : boolean whether to write the colnames from source;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;colnames&lt;/em&gt; : provide colnames to be written;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;append&lt;/em&gt; : bool to indicate if it to append data;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;missingstring&lt;/em&gt; : string that indicates how missing values will be represented.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;using CSV
CSV.write(&amp;quot;./iris.csv&amp;quot;, foo, missingsstring = &amp;quot;NA&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;quot;./iris.csv&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To read a CSV file, we use the &lt;code&gt;CSV.read()&lt;/code&gt;. Some useful arguments are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;delim&lt;/em&gt; : a Char or String that indicates how columns are delimited in a file’s delimeter. Default ‘,’;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;decimal&lt;/em&gt; : a Char indicating how decimals are separated in
floats. Default ‘.’ ;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;limit&lt;/em&gt; : indicates the total number of rows to read;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;header&lt;/em&gt; : provide manually the names of the columns;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;types&lt;/em&gt; : a Vector or Dict of types to be used for column types.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;julia&#34;&gt;&lt;code&gt;iris = CSV.read(&amp;quot;./iris.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 150×5 DataFrame
## │ Row │ SepalLength │ SepalWidth │ PetalLength │ PetalWidth │ Species   │
## │     │ Float64⍰    │ Float64⍰   │ Float64⍰    │ Float64⍰   │ String⍰   │
## ├─────┼─────────────┼────────────┼─────────────┼────────────┼───────────┤
## │ 1   │ 5.1         │ 3.5        │ 1.4         │ 0.2        │ setosa    │
## │ 2   │ 4.9         │ 3.0        │ 1.4         │ 0.2        │ setosa    │
## │ 3   │ 4.7         │ 3.2        │ 1.3         │ 0.2        │ setosa    │
## │ 4   │ 4.6         │ 3.1        │ 1.5         │ 0.2        │ setosa    │
## │ 5   │ 5.0         │ 3.6        │ 1.4         │ 0.2        │ setosa    │
## │ 6   │ 5.4         │ 3.9        │ 1.7         │ 0.4        │ setosa    │
## │ 7   │ 4.6         │ 3.4        │ 1.4         │ 0.3        │ setosa    │
## ⋮
## │ 143 │ 5.8         │ 2.7        │ 5.1         │ 1.9        │ virginica │
## │ 144 │ 6.8         │ 3.2        │ 5.9         │ 2.3        │ virginica │
## │ 145 │ 6.7         │ 3.3        │ 5.7         │ 2.5        │ virginica │
## │ 146 │ 6.7         │ 3.0        │ 5.2         │ 2.3        │ virginica │
## │ 147 │ 6.3         │ 2.5        │ 5.0         │ 1.9        │ virginica │
## │ 148 │ 6.5         │ 3.0        │ 5.2         │ 2.0        │ virginica │
## │ 149 │ 6.2         │ 3.4        │ 5.4         │ 2.3        │ virginica │
## │ 150 │ 5.9         │ 3.0        │ 5.1         │ 1.8        │ virginica │&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is important to note that when loading in a DataFrame from a CSV, all columns
allow Missing by default.&lt;/p&gt;
&lt;p&gt;This is the basics of reading/writting CSV files in Julia. To get more details
refers to the &lt;a href=&#34;http://juliadata.github.io/CSV.jl/latest/#High-level-interface-1&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion:&lt;/h1&gt;
&lt;p&gt;This post was a very small introduction to the &lt;strong&gt;DataFrames&lt;/strong&gt; packages in Julia.
After reading this post you will be able to read CSV datasets and perform some
tasks with the data at hand.&lt;/p&gt;
&lt;p&gt;In the following posts, we will explore more advanced tricks to perform data
wrangling and exploratory data analysis. At each step we are going to build
knowledge to completely use Julia to perform data analysis for any problem that
you might face.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
